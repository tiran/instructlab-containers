name: InstructLab containers

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:

permissions:
    contents: read
    id-token: write
    packages: write
    attestations: write

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
    container:
        name: "${{ matrix.suffix }} container"
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
            matrix:
                include:
                    - containerfile: containers/rocm/Containerfile.fedora
                      suffix: rocm-fc40-gfx1100
                      context: instructlab/
                      free_diskspace: true
                      build_args: |
                          AMDGPU_ARCH=gfx1100
                          HSA_OVERRIDE_GFX_VERSION=11.0.0
                          PKG_CACHE=off

                    - containerfile: containers/rocm/Containerfile.fedora
                      suffix: rocm-fc40-gfx1030
                      context: instructlab/
                      free_diskspace: true
                      build_args: |
                          AMDGPU_ARCH=gfx1030
                          HSA_OVERRIDE_GFX_VERSION=10.3.0

                    - containerfile: containers/cuda/Containerfile
                      suffix: cuda-ubi9
                      context: instructlab/
                      free_diskspace: true
                      build_args: |
                          PKG_CACHE=off

                    - containerfile: containers/rocm/Containerfile.c9s
                      suffix: rocm-c9s
                      context: instructlab/
                      free_diskspace: true
                      build_args: |
                          PKG_CACHE=off
                          # FLASH_ATTN_AMDGPU_TARGETS=gfx90a,gfx942

                    - containerfile: containers/hpu/Containerfile
                      suffix: hpu-rhel-hl1.15.1
                      context: instructlab-hpu/
                      free_diskspace: true
                      build_args: |
                          PKG_CACHE=off

                    - containerfile: containers/cpu/Containerfile
                      suffix: cpu-ubi9
                      context: instructlab/
                      free_diskspace: false
                      build_args: |
                          PKG_CACHE=off
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: true

            # /mnt has ~ 65 GB free disk space. / is too small.
            - name: Reconfigure Docker data-root
              run: |
                  set -e
                  sudo mkdir /mnt/docker
                  jq '. + {"data-root": "/mnt/docker"}' < /etc/docker/daemon.json | tee /tmp/daemon.json
                  sudo mv /tmp/daemon.json /etc/docker/daemon.json
                  sudo systemctl restart docker.service
                  df -h

            - name: Docker info
              run: docker info

            - name: Replace submodule .git reference for setuptools-scm
              run: make hack-submodule

            - name: Login to Quay.io
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=${{ matrix.suffix }}

            - name: Build and export image ${{ steps.meta.outputs.tags }}
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: ${{ matrix.context }}
                  load: True
                  push: false
                  file: ${{ matrix.containerfile }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: ${{ matrix.build_args }}
                  cache-from: type=gha
                  cache-to: type=gha

            - name: List images ${{ steps.meta.outputs.tags }}
              run: |
                  docker images

            - name: Test image ${{ steps.meta.outputs.tags }}
              run: |
                  set -e
                  echo "::group::pip list"
                  docker run --rm ${{ steps.meta.outputs.tags }} pip list
                  echo "::endgroup::"

                  echo "::group::ilab version"
                  docker run --rm ${{ steps.meta.outputs.tags }} ilab --version
                  echo "::endgroup::"

                  echo "::group::import torch, llama_cpp"
                  docker run --rm ${{ steps.meta.outputs.tags }} python3 -c 'import torch, llama_cpp'
                  echo "::endgroup::"

            - name: Push image all tags ${{ env.IMAGE_NAME }}
              if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch' }}
              run: |
                  docker push --all-tags ${{ env.IMAGE_NAME }}

            - name: Generate artifact attestation
              if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch' }}
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ env.IMAGE_NAME }}
                  subject-digest: ${{ steps.build.outputs.digest }}
                  # Does not work, yet?
                  # Error uploading artifact to container registry
                  # push-to-registry: true
